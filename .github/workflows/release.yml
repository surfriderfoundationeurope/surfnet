name: Release

on:
  workflow_dispatch:
    inputs:
      releaseBump:
        description: 'Release bump rule'
        required: true
        default: 'patch'
      username:
        description: 'Pypi username'
        required: true
      password:
        description: 'Pypi password'
        required: true
jobs:
  validateInputs:
    name: "Validate inputs"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Validate bump rule"
        run: |
          test "${{ github.event.inputs.releaseBump }}" = "major" || 
          test "${{ github.event.inputs.releaseBump }}" = "minor" ||
          test "${{ github.event.inputs.releaseBump }}" = "patch"

  tests:
    needs: [validateInputs]
    name: "${{ matrix.python-version }} / ${{ matrix.os }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python-version: 3.8, os: ubuntu-latest }

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4
        with:
          repository: 'build/cleanup'

      - name: Set up Python {{ "${{ matrix.python-version }}" }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Upgrade pip
        run: |
          pip install --upgrade pip
          pip --version
      - name: Install dependencies
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version
          poetry install
      - name: Run lint
        run: |
          pip install flake8
          poetry run flake8

  release:
    needs: [ tests ]
    name: "release"
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4
        with:
          repository: 'build/cleanup'

      - name: Set up Python {{ "${{ matrix.python-version }}" }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.8"
      - name: Upgrade pip
        run: |
          pip install --upgrade pip
          pip --version
      - name: Install dependencies
        run: |
          pip install --upgrade poetry
          poetry --version
          poetry install
      - name: Set Release version
        run: |
          poetry version ${{ github.event.inputs.releaseBump }}
          git config user.name "Release"
          git config user.email "<>"
          git add pyproject.toml
          git commit -m "Prepare release with bump: ${{ github.event.inputs.releaseBump }}"
          git push origin HEAD:$(echo $GITHUB_REF | cut -d'/' -f 3)
      - name: Check Version
        id: check-version
        run: |
          [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] \
            || echo ::set-output name=prerelease::true
          echo "::set-output name=tag::$(poetry version --short)"
          echo "::set-output name=branch::$(echo $GITHUB_REF | cut -d'/' -f 3)"
      - name: Build project for distribution
        run: poetry build

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*,documentation*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.check-version.outputs.tag }}_${{ github.event.inputs.env }}
          draft: false
          commit: ${{ steps.check-version.outputs.branch }}
          prerelease: steps.check-version.outputs.prerelease == 'true'

      - name: Bump version
        run: |
          poetry version ${{ github.event.inputs.releaseBump }}
          git config user.name "Release"
          git config user.email "<>"
          git add pyproject.toml
          git commit -m "Bump project version"
          git push origin HEAD:$(echo $GITHUB_REF | cut -d'/' -f 3)

      - name: Publish to Pypi
        run: |
          poetry version
          poetry publish --username ${{ github.event.inputs.username }} --password ${{ github.event.inputs.password }} --dryrun



    

