name: PreRelease

on:
  push:
    branches:
      - dev

jobs:
  tests:
    name: "${{ matrix.python-version }} / ${{ matrix.os }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python-version: 3.8, os: ubuntu-latest }
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python {{ "${{ matrix.python-version }}" }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Upgrade pip
        run: |
          pip install --upgrade pip
          pip --version
      - name: Install dependencies
        run: |
          pip install poetry
          poetry --version
          poetry install
      - name: Run lint
        run: |
          poetry run flake8 src/plasticorigins/
          poetry run flake8 src/serving/
      - name: Run tests
        run: |
          cd models/
          sh download_pretrained_base.sh 
          cd ..
          poetry run coverage run -m pytest
          poetry run coverage xml
          rm models/mobilenet_v3_pretrained.pth

  release:
    needs: [tests]
    name: "release"
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python {{ "${{ matrix.python-version }}" }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.8"
      - name: Upgrade pip
        run: |
          pip install --upgrade pip
          pip --version
      - name: Install dependencies
        run: |
          pip install poetry
          poetry --version
          poetry install

      - name: Get Dev Version
        id: get-dev-version
        run: |
          echo "::set-output name=version::$(poetry version --short)"
      - name: Check Version
        id: check-version
        run: |
          [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] \
            || echo ::set-output name=prerelease::true
          echo "::set-output name=tag::$(poetry version --short)"
          echo "::set-output name=branch::$(echo $GITHUB_REF | cut -d'/' -f 3)"

      - name: Build project for distribution
        run: poetry build

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.check-version.outputs.tag }}
          draft: false
          commit: ${{ steps.check-version.outputs.branch }}
          prerelease: steps.check-version.outputs.prerelease == 'true'

      - name: Publish to Pypi
        run: |
          poetry version
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish
